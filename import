#!/usr/bin/env php
<?php
namespace Import;

require_once './vendor/autoload.php';
require_once './libraries/moodle-format/format.php';
require_once './libraries/moodle-format/gift/format.php';

$strict = in_array('--strict', $_SERVER['argv']);
$arguments = new \cli\Arguments(compact('strict'));
$arguments->addFlag(array('verbose', 'v'), 'Turn on verbose output');
$arguments->addFlag('version', 'Display the version');
$arguments->addFlag(array('quiet', 'q'), 'Disable all output');
$arguments->addFlag(array('help', 'h'), 'Show this help screen');
$arguments->addOption(array('dir', 'd'), 'Directory containg the TXT files');
$arguments->parse();

abstract class Output {
  protected $importer;
  protected $dirPath;
  protected $savePath;

  public function __construct($importer, $dirPath) {
    $this->importer = $importer;
    $this->dirPath = $dirPath;
    $this->savePath = "{$dirPath}/output";
    $this->checkSavePath();
  }

  public function checkSavePath() {
    if (!is_dir($this->savePath)) {
      mkdir($this->savePath);
    }
  }

  public function getFilename($filePath) {
    return trim(pathinfo($filePath, PATHINFO_FILENAME));
  }

  public function buildFilename($filePath) {
    return $this->getFilename($filePath) . '.' . $this->getExtension();
  }

  public function saveToFile($files) {
    foreach ($files as $filePath => $questions) {
      file_put_contents("{$this->savePath}/{$this->buildFilename($filePath)}", $this->build($filePath, $questions));
    }
  }

  abstract function getExtension();

  abstract function build($filePath, $questionsData);
}

class LearnDashOutput extends Output {
  public function getExtension() {
    return 'xml';
  }

  public function getQuizText($filePath) {
    $quizText = preg_replace("/^(?:[\s]*)[0-9]+(?:[\s]*)\-(?:[\s]*)/", '', $this->getFilename($filePath));
    return preg_replace("/([\D])$/", '?', $quizText);
  }

  public function build($filePath, $questionsData) {
    $tree = new \DOMDocument('1.0', 'UTF-8');

    $root = $tree->createElement('wpProQuiz');
    $root = $tree->appendChild($root);

    $header = $tree->createElement('header');
    $header->setAttribute('version', '0.28');
    $header->setAttribute('exportVersion', '1');
    $header = $root->appendChild($header);

    $data = $tree->createElement('data');
    $data = $root->appendChild($data);

    $quiz = $tree->createElement('quiz');

    // title
    $title = $tree->createElement('title');
    $title->setAttribute('titleHidden', 'false');
    $title->appendChild($tree->createCDATASection($this->getFilename($filePath)));
    $quiz->appendChild($title);

    // text
    $text = $tree->createElement('text');
    $text->appendChild($tree->createCDATASection($this->getQuizText($filePath)));
    $quiz->appendChild($text);

    // resultText
    $resultText = $tree->createElement('resultText');
    $resultText->setAttribute('gradeEnabled', 'false');
    $resultText->appendChild($tree->createCDATASection(''));
    $quiz->appendChild($resultText);

    // btnRestartQuizHidden
    $btnRestartQuizHidden = $tree->createElement('btnRestartQuizHidden', 'true');
    $quiz->appendChild($btnRestartQuizHidden);

    // btnViewQuestionHidden
    $btnViewQuestionHidden = $tree->createElement('btnViewQuestionHidden', 'true');
    $quiz->appendChild($btnViewQuestionHidden);

    // questionRandom
    $questionRandom = $tree->createElement('questionRandom', 'false');
    $quiz->appendChild($questionRandom);

    // answerRandom
    $answerRandom = $tree->createElement('answerRandom', 'true');
    $quiz->appendChild($answerRandom);

    // timeLimit
    $timeLimit = $tree->createElement('timeLimit', '600');
    $quiz->appendChild($timeLimit);

    // showPoints
    $showPoints = $tree->createElement('showPoints', 'false');
    $quiz->appendChild($showPoints);

    // statistic
    $statistic = $tree->createElement('statistic');
    $statistic->setAttribute('activated', 'true');
    $statistic->setAttribute('ipLock', '0');
    $quiz->appendChild($statistic);

    // quizRunOnce
    $quizRunOnce = $tree->createElement('quizRunOnce', 'true');
    $quizRunOnce->setAttribute('type', '2');
    $quizRunOnce->setAttribute('cookie', 'false');
    $quizRunOnce->setAttribute('time', '0');
    $quiz->appendChild($quizRunOnce);

    // numberedAnswer
    $numberedAnswer = $tree->createElement('numberedAnswer', 'false');
    $quiz->appendChild($numberedAnswer);

    // hideAnswerMessageBox
    $hideAnswerMessageBox = $tree->createElement('hideAnswerMessageBox', 'true');
    $quiz->appendChild($hideAnswerMessageBox);

    // disabledAnswerMark
    $disabledAnswerMark = $tree->createElement('disabledAnswerMark', 'true');
    $quiz->appendChild($disabledAnswerMark);

    // showMaxQuestion
    $showMaxQuestion = $tree->createElement('showMaxQuestion', 'false');
    $showMaxQuestion->setAttribute('showMaxQuestionValue', '1');
    $showMaxQuestion->setAttribute('showMaxQuestionPercent', 'false');
    $quiz->appendChild($showMaxQuestion);

    // toplist
    $toplist = $tree->createElement('toplist');
    $toplist->setAttribute('activated', 'false');

    //// toplistDataAddPermissions
    $toplistDataAddPermissions = $tree->createElement('toplistDataAddPermissions', '1');
    $toplist->appendChild($toplistDataAddPermissions);

    //// toplistDataSort
    $toplistDataSort = $tree->createElement('toplistDataSort', '1');
    $toplist->appendChild($toplistDataSort);

    //// toplistDataAddMultiple
    $toplistDataAddMultiple = $tree->createElement('toplistDataAddMultiple', 'false');
    $toplist->appendChild($toplistDataAddMultiple);

    //// toplistDataAddBlock
    $toplistDataAddBlock = $tree->createElement('toplistDataAddBlock', '1');
    $toplist->appendChild($toplistDataAddBlock);

    //// toplistDataShowLimit
    $toplistDataShowLimit = $tree->createElement('toplistDataShowLimit', '1');
    $toplist->appendChild($toplistDataShowLimit);

    //// toplistDataShowIn
    $toplistDataShowIn = $tree->createElement('toplistDataShowIn', '1');
    $toplist->appendChild($toplistDataShowIn);

    //// toplistDataCaptcha
    $toplistDataCaptcha = $tree->createElement('toplistDataCaptcha', 'false');
    $toplist->appendChild($toplistDataCaptcha);

    //// toplistDataAddAutomatic
    $toplistDataAddAutomatic = $tree->createElement('toplistDataAddAutomatic', 'true');
    $toplist->appendChild($toplistDataAddAutomatic);

    $quiz->appendChild($toplist);

    // showAverageResult
    $showAverageResult = $tree->createElement('showAverageResult', 'true');
    $quiz->appendChild($showAverageResult);

    // prerequisite
    $prerequisite = $tree->createElement('prerequisite', 'false');
    $quiz->appendChild($prerequisite);

    // showReviewQuestion
    $showReviewQuestion = $tree->createElement('showReviewQuestion', 'false');
    $quiz->appendChild($showReviewQuestion);

    // quizSummaryHide
    $quizSummaryHide = $tree->createElement('quizSummaryHide', 'false');
    $quiz->appendChild($quizSummaryHide);

    // skipQuestionDisabled
    $skipQuestionDisabled = $tree->createElement('skipQuestionDisabled', 'true');
    $quiz->appendChild($skipQuestionDisabled);

    // emailNotification
    $emailNotification = $tree->createElement('emailNotification', '0');
    $quiz->appendChild($emailNotification);

    // userEmailNotification
    $userEmailNotification = $tree->createElement('userEmailNotification', 'false');
    $quiz->appendChild($userEmailNotification);

    // showCategoryScore
    $showCategoryScore = $tree->createElement('showCategoryScore', 'false');
    $quiz->appendChild($showCategoryScore);

    // hideResultCorrectQuestion
    $hideResultCorrectQuestion = $tree->createElement('hideResultCorrectQuestion', 'true');
    $quiz->appendChild($hideResultCorrectQuestion);

    // hideResultQuizTime
    $hideResultQuizTime = $tree->createElement('hideResultQuizTime', 'false');
    $quiz->appendChild($hideResultQuizTime);

    // hideResultPoints
    $hideResultPoints = $tree->createElement('hideResultPoints', 'true');
    $quiz->appendChild($hideResultPoints);

    // autostart
    $autostart = $tree->createElement('autostart', 'true');
    $quiz->appendChild($autostart);

    // forcingQuestionSolve
    $forcingQuestionSolve = $tree->createElement('forcingQuestionSolve', 'true');
    $quiz->appendChild($forcingQuestionSolve);

    // hideQuestionPositionOverview
    $hideQuestionPositionOverview = $tree->createElement('hideQuestionPositionOverview', 'true');
    $quiz->appendChild($hideQuestionPositionOverview);

    // hideQuestionNumbering
    $hideQuestionNumbering = $tree->createElement('hideQuestionNumbering', 'true');
    $quiz->appendChild($hideQuestionNumbering);

    // sortCategories
    $sortCategories = $tree->createElement('sortCategories', 'false');
    $quiz->appendChild($sortCategories);

    // showCategory
    $showCategory = $tree->createElement('showCategory', 'false');
    $quiz->appendChild($showCategory);

    // quizModus
    $quizModus = $tree->createElement('quizModus', '0');
    $quizModus->setAttribute('questionsPerPage', '10');
    $quiz->appendChild($quizModus);

    // startOnlyRegisteredUser
    $startOnlyRegisteredUser = $tree->createElement('startOnlyRegisteredUser', 'false');
    $quiz->appendChild($startOnlyRegisteredUser);

    // forms
    $forms = $tree->createElement('forms');
    $forms->setAttribute('activated', 'false');
    $forms->setAttribute('position', '0');
    $quiz->appendChild($forms);

    // questions
    $questions = $tree->createElement('questions');

    foreach ($questionsData as $questionDataKey => $questionData) {
      $questionNumber = $questionDataKey + 1;
      $question = $tree->createElement('question');
      $question->setAttribute('answerType', 'single');

      // title
      $title = $tree->createElement('title');
      $title->appendChild($tree->createCDATASection("Pergunta: {$questionNumber}"));
      $question->appendChild($title);

      // points
      $points = $tree->createElement('points', '1');
      $question->appendChild($points);

      // questionText
      $questionText = $tree->createElement('questionText');
      $questionText->appendChild($tree->createCDATASection($questionData->questiontext));
      $question->appendChild($questionText);

      // correctMsg
      $correctMsg = $tree->createElement('correctMsg');
      $correctMsg->appendChild($tree->createCDATASection(''));
      $question->appendChild($correctMsg);

      // incorrectMsg
      $incorrectMsg = $tree->createElement('incorrectMsg');
      $incorrectMsg->appendChild($tree->createCDATASection(''));
      $question->appendChild($incorrectMsg);

      // tipMsg
      $tipMsg = $tree->createElement('tipMsg');
      $tipMsg->setAttribute('enabled', 'false');
      $tipMsg->appendChild($tree->createCDATASection(''));
      $question->appendChild($tipMsg);

      // category
      $category = $tree->createElement('category');
      $question->appendChild($category);

      // correctSameText
      $correctSameText = $tree->createElement('correctSameText', 'false');
      $question->appendChild($correctSameText);

      // showPointsInBox
      $showPointsInBox = $tree->createElement('showPointsInBox', 'false');
      $question->appendChild($showPointsInBox);

      // answerPointsActivated
      $answerPointsActivated = $tree->createElement('answerPointsActivated', 'false');
      $question->appendChild($answerPointsActivated);

      // answerPointsDiffModusActivated
      $answerPointsDiffModusActivated = $tree->createElement('answerPointsDiffModusActivated', 'false');
      $question->appendChild($answerPointsDiffModusActivated);

      // disableCorrect
      $disableCorrect = $tree->createElement('disableCorrect', 'false');
      $question->appendChild($disableCorrect);

      // answers
      $answers = $tree->createElement('answers');

      foreach ($questionData->answer as $anwserDataKey => $answerData) {
        // answer
        $answer = $tree->createElement('answer');
        $answer->setAttribute('points', '0');
        $answer->setAttribute('correct', ($questionData->fraction[$anwserDataKey] > 0) ? 'true' : 'false');

        // answerText
        $answerText = $tree->createElement('answerText');
        $answerText->setAttribute('html', 'false');
        $answerText->appendChild($tree->createCDATASection($answerData['text']));
        $answer->appendChild($answerText);

        // stortText
        $stortText = $tree->createElement('stortText');
        $stortText->setAttribute('html', 'false');
        $stortText->appendChild($tree->createCDATASection(''));
        $answer->appendChild($stortText);

        $answers->appendChild($answer);
      }

      $question->appendChild($answers);

      $questions->appendChild($question);
    }

    $quiz->appendChild($questions);
    $data->appendChild($quiz);

    return $tree->saveXML();
  }
}

class Directory {
  protected $importer;
  protected $path;

  public function __construct($importer, $path) {
    $this->importer = $importer;
    $this->path = $path;
  }

  public function getFiles() {
    return glob("{$this->path}/*.txt");
  }
}

class Parser {
  protected $importer;
  protected $dir;

  public function __construct($importer, $dir, $format = 'gift') {
    $this->importer = $importer;
    $this->dir = $dir;
    $this->format = "qformat_{$format}";
  }

  public function parse() {
    return array_reduce($this->dir->getFiles(), function($curry, $filePath) {
      $formatter = $this->getFormatter($filePath);
      if (!$questions = $formatter->importprocess()) {
        // TODO: Handle import errors
        var_dump($formatter->importerrorsdata);die;
      }
      $curry[$filePath] = $questions;
      return $curry;
    }, array());
  }

  public function getFormatter($filePath) {
    $formatter = new $this->format();
    $formatter->setFilename($filePath);
    $formatter->setRealfilename($filePath);
    return $formatter;
  }
}

class Import {
  protected $cli;
  protected $dir;

  public function __construct($cli, $dirPath, $output = 'Import\LearnDashOutput') {
    $this->cli = $cli;
    $this->dir = new Directory($this, $dirPath);
    $this->parser = new Parser($this, $this->dir);
    $this->output = new $output($this, $dirPath);
  }

  public function process() {
    $this->output->saveToFile($this->parser->parse());
  }
}

class ImportCLI {
  protected $args;

  public function __construct($args) {
    $this->args = $args;
    $this->import = new Import($this, $this->args['dir']);
    $this->checkForHelp();
    $this->validate();
  }

  public function checkForHelp() {
    if ($this->args['help']) {
      echo $this->showHeader() . PHP_EOL . $this->showUsage();
      exit;
    }
  }

  public function validate() {
    if (!is_dir($this->args['dir'])) {
      $this->showError('The directory does not exist.');
    } else if (!is_readable($this->args['dir'])) {
      $this->showError('The directory is not readable.');
    }
  }

  public function showHeader() {
    echo "GIFT Import > Learn Dash";
  }

  public function showUsage() {
    echo <<<USAGE
Usage:
import -d /Desktop/QuizesTXTFolder

{$this->args->getHelpScreen()}
USAGE;
  }

  public function showError($error) {
    echo "ERROR: " . $error . PHP_EOL . PHP_EOL;
    $this->showUsage();
    exit(1);
  }

  public function process() {
    return $this->import->process();
  }
}

$cli = new ImportCLI($arguments);
$cli->process();
